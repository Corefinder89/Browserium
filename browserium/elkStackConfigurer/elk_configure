#!/usr/bin/env python
from browserium.utility.os_type import OS_type
from browserium.utility.utility import Utility
from subprocess import call

class elkConfigure(OS_type, Utility):

    @staticmethod
    def platform_type():
        platform_val = OS_type.os_name()
        return platform_val

    @staticmethod
    def configure_elkStack():
        os_cat = elkConfigure.platform_type()
        if os_cat == 'macos':
            elkConfigure.install_elkStack_forMac()
        if os_cat == 'linux':
            elkConfigure

    @staticmethod
    def install_elkStack_forMac():
        call(["brew", "install", "elasticsearch"])
        call(["brew", "services", "start", "elasticsearch"])
        call(["brew", "install", "logstash"])
        call(["brew", "services", "start", "logstash"])
        call(["brew", "install", "kibana"])
        elkConfigure.configure_kibana_mac()
        call(["brew", "services", "start", "kibana"])
        elkConfigure.install_logstashAsync()

    @staticmethod
    def evaluate_package_type_debian():
        pckg = OS_type.distribution_type("apt","rpm")

        if "apt" in pckg:
            Utility.log_message("INFO", "Package type is debian based")
            elkConfigure.install_elkStack_forLinuxDebian()
        elif "RPM" in pckg:
            Utility.log_message("INFO", "Package type is RPM based")
            elkConfigure.install_elkStack_forLinuxRPM()
        else:
            Utility.log_message("ERROR", "Package type not supported")

    @staticmethod
    def install_elkStack_forLinuxDebian():
        pass

    @staticmethod
    def install_elkStack_forLinuxRPM():
        pass

    @staticmethod
    def configure_kibana_mac():
        file_path = Utility.get_path("elkStackConfigurer/darwin/kibana.yml")
        rectified_filePath = file_path.replace("utility/","")
        call(["cp", rectified_filePath, "/usr/local/etc/kibana/"])
        Utility.log_message("INFO", "kibana configuration file copied to /usr/local/etc/kibana")

    @staticmethod
    def install_logstashAsync():
        call(["pip", "install", "python-logstash-async"])

    @staticmethod
    def main():
        elkConfigure.configure_elkStack()

if __name__ == '__main__':
    elkConfigure.main()

