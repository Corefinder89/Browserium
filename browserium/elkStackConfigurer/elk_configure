#!/usr/bin/env python
from browserium.utility.os_type import OS_type
from browserium.utility.utility import Utility
from subprocess import call

class elkConfigure(OS_type, Utility):
    @staticmethod
    def evaluate_package_type_debian():
        pckg = OS_type.distribution_type()
        return pckg

    @staticmethod
    def platform_type():
        platform_val = OS_type.os_name()
        return platform_val

    @staticmethod
    def configure_elkStack():
        os_cat = elkConfigure.platform_type()
        if os_cat == 'macos':
            elkConfigure.install_elkStack_forMac()
        if os_cat == 'linux':
            dist_type = OS_type.distribution_type()
            print dist_type
            if 'debian' in dist_type:
                elkConfigure.install_elkStack_forLinuxDebian()
            elif 'rhel fedora':
                elkConfigure.install_elkStack_forLinuxRPM()

    @staticmethod
    def install_elkStack_forMac():
        try:
            file_path = Utility.get_path("elkStackConfigurer/darwin/mac_installation.sh")
            rectified_filePath = file_path.replace("utility/","")
            call(["chmod", "+x", rectified_filePath])
            call(rectified_filePath)
            call("")
            elkConfigure.install_logstashAsync()
        except OSError as e:
            Utility.log_message("ERROR", "Error in installation")
            print e

    @staticmethod
    def install_elkStack_forLinuxDebian():
        call(["sudo", "apt-get", "install", "wget"])
        call(["sudo", "add-apt-repository", "-y", "ppa:webupd8team/java"])
        call(["sudo", "apt-get", "update"])
        call(["sudo", "apt-get", "-y", "install", "oracle-java8-installer"])
        call(["wget", "-qO", "- https://packages.elastic.co/GPG-KEY-elasticsearch", "|", "sudo", "apt-key", "add", "-"])
        call(["sudo", "apt-get", "install", "apt-transport-https"])
        call(["echo", "deb", "https://artifacts.elastic.co/packages/6.x/apt", "stable", "main", "|", "sudo", "tee" ,"-a", "/etc/apt/sources.list.d/elastic-6.x.list"])

    @staticmethod
    def install_elkStack_forLinuxRPM():
        pass

    @staticmethod
    def configure_kibana_mac():
        file_path = Utility.get_path("elkStackConfigurer/darwin/kibana.yml")
        rectified_filePath = file_path.replace("utility/","")
        call(["cp", rectified_filePath, "/usr/local/etc/kibana/"])
        Utility.log_message("INFO", "kibana configuration file copied to /usr/local/etc/kibana")

    @staticmethod
    def install_logstashAsync():
        call(["pip", "install", "python-logstash-async"])

    @staticmethod
    def main():
        elkConfigure.configure_elkStack()

if __name__ == '__main__':
    elkConfigure.main()

